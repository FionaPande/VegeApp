{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/fionaneumann/Documents/React/Project/vegancos/screens/HomeScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\nimport HeaderButton from \"../components/HeaderButton\";\nimport { CATEGORIES } from \"../data/dummy-data\";\nimport CategoryGridTile from \"../components/CategoryGridTile\";\n\nvar HomeScreen = function HomeScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasError = _useState2[0],\n      setErrors = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      someError = _useState4[0],\n      setSomeErrors = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      data = _useState6[0],\n      setData = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isLoading = _useState8[0],\n      setLoading = _useState8[1];\n\n  useEffect(function () {\n    var tryLogin = function tryLogin() {\n      var userData, x, myUser;\n      return _regeneratorRuntime.async(function tryLogin$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userData'));\n\n            case 2:\n              userData = _context.sent;\n              x = JSON.parse(userData);\n              myUser = x.userId;\n              console.log(userData);\n              console.log(\"Test \" + JSON.stringify(myUser));\n              global.myUserString = JSON.stringify(myUser);\n              console.log(myUserString);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    tryLogin();\n  });\n\n  function fetchData() {\n    var res, responseData;\n    return _regeneratorRuntime.async(function fetchData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            res = null;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"https://vegancosmetics.ew.r.appspot.com/rest/veganservice/getAll\"));\n\n          case 4:\n            res = _context2.sent;\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](1);\n            setErrors(true);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 13:\n            responseData = _context2.sent;\n            setData(responseData);\n            global.myData = responseData;\n            _context2.next = 23;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t1 = _context2[\"catch\"](10);\n            setErrors(true);\n            setSomeErrors(\"ERROR: \" + hasError + \" my error \" + _context2.t1);\n            console.log(someError);\n\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 7], [10, 18]], Promise);\n  }\n\n  useEffect(function () {\n    if (isLoading == true) {\n      setLoading(false);\n      fetchData();\n    }\n  });\n\n  if (isLoading == true) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        padding: 20,\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: \"#00ff00\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }));\n  } else if (hasError) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        padding: 20,\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, hasError), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"\" + someError));\n  } else {\n    var renderGridItem = function renderGridItem(itemData) {\n      return React.createElement(CategoryGridTile, {\n        title: itemData.item.title,\n        onSelect: function onSelect() {\n          props.navigation.navigate({\n            routeName: 'CategoryProduct',\n            params: {\n              categoryId: itemData.item.id,\n              categoryTitle: itemData.item.title\n            }\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      });\n    };\n\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, React.createElement(FlatList, {\n      keyExtractor: function keyExtractor(item, index) {\n        return item.id;\n      },\n      data: CATEGORIES,\n      renderItem: renderGridItem,\n      numColumns: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }\n    }));\n  }\n\n  ;\n};\n\nHomeScreen.navigationOptions = function (navData) {\n  return {\n    headerTitle: 'Categories',\n    headerLeft: React.createElement(HeaderButtons, {\n      HeaderButtonComponent: HeaderButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, React.createElement(Item, {\n      title: \"Menu\",\n      iconName: \"ios-menu\",\n      onPress: function onPress() {\n        navData.navigation.toggleDrawer();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }))\n  };\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default HomeScreen;","map":{"version":3,"sources":["/Users/fionaneumann/Documents/React/Project/vegancos/screens/HomeScreen.js"],"names":["React","useState","useEffect","AsyncStorage","HeaderButtons","Item","HeaderButton","CATEGORIES","CategoryGridTile","HomeScreen","props","hasError","setErrors","someError","setSomeErrors","data","setData","isLoading","setLoading","tryLogin","getItem","userData","x","JSON","parse","myUser","userId","console","log","stringify","global","myUserString","fetchData","res","fetch","json","responseData","myData","flex","padding","justifyContent","renderGridItem","itemData","item","title","navigation","navigate","routeName","params","categoryId","id","categoryTitle","index","navigationOptions","navData","headerTitle","headerLeft","toggleDrawer","styles","StyleSheet","create","screen","alignItems"],"mappings":"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","sourcesContent":["import React , {useState, useEffect} from 'react';\nimport {\n  View,\n  Text,\n  FlatList,\n  StyleSheet,\n  TouchableOpacity,\n  ActivityIndicator,\n  AsyncStorage\n} from 'react-native';\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\n\nimport HeaderButton from '../components/HeaderButton';\nimport { CATEGORIES } from '../data/dummy-data';\nimport CategoryGridTile from '../components/CategoryGridTile';\nconst HomeScreen = props => {\n  const [hasError, setErrors] = useState(false);\n  const [someError, setSomeErrors] = useState('');\n  const [data, setData] = useState([]);\n  const [isLoading, setLoading]=useState(true);\n\n  useEffect(() => {\n    const tryLogin = async () => {\n      const userData = await AsyncStorage.getItem('userData');\n   const  x = JSON.parse(userData)\n          const myUser = x.userId\n      console.log(userData)\n      console.log(\"Test \" + JSON.stringify(myUser))\n\n    global.myUserString = JSON.stringify(myUser);\n\n     console.log(myUserString)\n  \n     \n      \n    };\n\n    tryLogin();\n  },);\n\n  async function fetchData() {\n \n    let res = null;\n    try{\n\n      res=await fetch(\"https://vegancosmetics.ew.r.appspot.com/rest/veganservice/getAll\");\n    }\n    catch(error){\n      setErrors(true);\n    }\n\n    try{\n      const responseData = await res.json();\n   \n      setData(responseData);\n      global.myData = responseData;\n    }\n    catch(err){\n      setErrors(true);\n      setSomeErrors(\"ERROR: \"+hasError+ \" my error \"+err);\n      console.log(someError);\n    }\n  }\n\n  useEffect(() => {\n      if (isLoading==true){\n      setLoading(false);\n      fetchData();\n  \n    }\n  });\n\n  if (isLoading==true) {\n    return (\n      <View style={{flex: 1, padding: 20, justifyContent:'center'}}>\n        <ActivityIndicator size=\"large\" color=\"#00ff00\" />\n      </View>\n    );\n  }\n\n  else if(hasError){\n    return(\n      <View style={{flex: 1, padding: 20, justifyContent:'center'}}>\n        <Text>{hasError}</Text>\n        <Text>{\"\"+someError}</Text>\n      </View>\n    );\n  }\n  else{\n  const renderGridItem = itemData => {\n    return (\n      <CategoryGridTile\n        title={itemData.item.title}\n        onSelect={() => {\n          props.navigation.navigate({\n            routeName: 'CategoryProduct',\n            params: {\n              categoryId: itemData.item.id,\n              categoryTitle : itemData.item.title,\n            }\n          });\n        }}\n      />\n    );\n  };\n\n  return (\n    <View>\n    <FlatList\n      keyExtractor={(item, index) => item.id}\n      data={CATEGORIES}\n      renderItem={renderGridItem}\n      numColumns={1}\n    />\n\n</View>\n   \n  );\n};\n\n\n  }\nHomeScreen.navigationOptions = navData => {\n  return {\n    headerTitle: 'Categories',\n    headerLeft: (\n      <HeaderButtons HeaderButtonComponent={HeaderButton}>\n        <Item\n          title=\"Menu\"\n          iconName=\"ios-menu\"\n          onPress={() => {\n            navData.navigation.toggleDrawer();\n          }}\n        />\n      </HeaderButtons>\n    )\n  };\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nexport default HomeScreen;"]},"metadata":{},"sourceType":"module"}